generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  display_name String
  username  String @unique
  url       String @unique //will be the same as username, but stylized
  bio       String?
  img       String?
  type       ProfileType?
  categoryId String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  num_followers   Int @default(0)
  num_following   Int @default(0)
  num_posts       Int @default(0)
  post_likes_made Int @default(0)
  post_likes_received Int @default(0)
  dislikes_made Int @default(0)
  dislikes_received Int @default(0)
  mediaviews_made Int @default(0)
  mediaviews_received Int @default(0)
  rebrews_made Int @default(0)
  rebrews_received Int @default(0)
  blocks_made Int @default(0)
  blocks_received Int @default(0)
  reports_made Int @default(0)
  reports_received Int @default(0)
  profileViews_made Int @default(0)
  profileViews_received Int @default(0)
  bookmarks_made Int @default(0)
  bookmarks_received Int @default(0)
  num_notifications Int @default(0)
  date_deleted DateTime?
  visibility VisibilitySettings @default(PUBLIC)

  // Relations
  userId String? @db.ObjectId
  companionId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  companion Companion? @relation(fields: [companionId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  // Followers relations
  listOfProfilesFollowingViewedProfile Follower[] @relation("listOfProfilesFollowingViewedProfile")
  listOfProfilesFollowedByViewedProfile Follower[] @relation("listOfProfilesFollowedByViewedProfile")


  postTagsCreated                PostTag[] @relation("initiatorProfile")
  postsTaggedIn                  PostTag[] @relation("targetProfile")

  notifications             Notification[] @relation("targetProfile")
  notificationsCreated      Notification[] @relation("initiator")

  // Messages and posts relations
  messagesSent Message[] @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")
  postsMade Post[] @relation("PostAndOwner")
  bookmarks Bookmark[]
  postLikesMadeList PostLike []

  // New fields for tracking rebrews
  rebrewsMadeList     Post[] @relation("RebrewsMadeByProfile")
  rebrewsReceivedList Post[] @relation("RebrewsReceivedByProfile")
}


model ReportPost {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  targetPostId String   @map("_targetPostId") @db.ObjectId
  initiatorId  String   @map("_initiatorId") @db.ObjectId

  // Assuming you have a Post model to which this ID refers
  targetPost   Post    @relation(fields: [targetPostId], references: [id])

  // Assuming you have a User model to which this ID refers
  initiator    User    @relation(fields: [initiatorId], references: [id])

  // Any additional fields such as timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlockUser {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blockedById  String   @map("_blockedById") @db.ObjectId
  blockedUserId String  @map("_blockedUserId") @db.ObjectId

  // Assuming a relationship to a User model for the person doing the blocking
  blockedBy    User    @relation("blockedBy", fields: [blockedById], references: [id])

  // Assuming a relationship to a User model for the person being blocked
  blockedUser  User    @relation("blockedUser", fields: [blockedUserId], references: [id])

  // Any additional fields such as timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Follower {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId    String   @db.ObjectId
  followeeId   String   @db.ObjectId
  createdAt     DateTime @default(now())

  follower      Profile  @relation("listOfProfilesFollowedByViewedProfile", fields: [followerId], references: [id])
  followee      Profile  @relation("listOfProfilesFollowingViewedProfile", fields: [followeeId], references: [id])
  date_deleted    DateTime?

  @@unique([followeeId, followerId])
}



model PostLike {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  targetPostId     String?    @db.ObjectId
  likerId           String    @db.ObjectId

  createdAt     DateTime @default(now())
  targetPost      Post?      @relation(fields: [targetPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  liker   Profile   @relation(fields: [likerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  
}



model Bookmark {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  targetPostId     String    @db.ObjectId
  targetCommentId  String    @db.ObjectId
  bookmarkerId      String    @db.ObjectId

  createdAt     DateTime @default(now())

  post        Post      @relation(fields: [targetPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookmarker  Profile      @relation(fields: [bookmarkerId], references: [id])

  
  @@unique([targetPostId, targetCommentId, bookmarkerId])
}

model Category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  title      String?
  companions Companion[]
  profiles   Profile[]
  posts       Post[]


  createdAt     DateTime @default(now())
  updatedAt            DateTime  @updatedAt
}

model LoginActivity {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  

  createdAt     DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}


model Companion {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  ownerId              String    @db.ObjectId
  username                 String    @unique
  img                  String
  model_type           String?
  description          String
  instructions         String
  profileId            String?   @db.ObjectId
  categoryId           String    @db.ObjectId 
  seed                 String
  functionalities      Json?
  post_frequency       Json @default("\"{number:1, frequency: 'daily'}\"")
  comment_frequency    Json @default("\"{number:2, frequency: 'hour'}\"")
  bookmarks_received   Int @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  date_deleted    DateTime?
  category             Category  @relation(fields: [categoryId], references: [id])

  profiles             Profile[]
  owner         User  @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)        


  @@index([categoryId])
}

enum ProfileType {
  human
  companion
}


enum Role {
  user
  system
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      Role
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId String @db.ObjectId
  receiverId String @db.ObjectId
  
  date_deleted    DateTime?
  
  sender Profile @relation("MessageSender", fields: [id], references: [id], onDelete: Cascade)
  receiver Profile @relation("MessageReceiver", fields: [id], references: [id], onDelete: Cascade)
  

  @@index([senderId])
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @db.ObjectId
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  date_deleted    DateTime?

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VisibilitySettings {
  PUBLIC
  PRIVATE_BROWSABLE_AND_SEARCHABLE
  PRIVATE_SEARCHABLE //search by email or phone
  PRIVATE_NOT_SEARCHABLE //direct handle required to find
}
enum AccountType {
  SAAS_OWNER
  SAAS_ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_USER
  INDIVIDUAL_USER
}
model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  first_name            String?
  last_name            String?
  accountType    AccountType
  loginProvider   LoginProvider
  username        String?   @unique
  bio             String?
  email           String?   @unique
  password        String?
  phone           String?
  onboarded       DateTime?
  preferred_categories Json?   
  walkthruCompleted DateTime?
  emailVerified   DateTime?
  img           String?
  coverImg      String?
  profileImg    String?
  hashedPassword  String?
  date_deleted    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  companions    Companion[]  @relation("owner")   
  
  subscriptions  UserSubscription[]  

  
  num_notifications     Int    @default(0)
  profiles              Profile[] //Profile?  @relation(fields: [profileId], references: [id])
  logins        LoginActivity[]


  // Relations
  reportedPosts ReportPost[] 
  blockedUsers BlockUser[]  @relation("blockedBy")
  blockedByUsers BlockUser[] @relation("blockedUser")


  // Other relations (if any)
}


model Post {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  body                  String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  profileId             String    @db.ObjectId
  media                 String[]
  mediaType             MediaType?
  num_comments          Int       @default(0)
  num_likes             Int       @default(0)
  num_bookmarks         Int       @default(0)
  categoryId            String?   @db.ObjectId
  date_deleted          DateTime?
  
  // Relations
  poster                Profile   @relation("PostAndOwner", fields: [profileId], references: [id], onDelete: Cascade)
  category              Category? @relation(fields: [categoryId], references: [id])

  // Original Post, Comment, or Rebrew
  postType              PostType

  // Reference to the original post (for comments and rebrews)
  originalPostId        String?   @db.ObjectId
  originalPost          Post?     @relation("OriginalPostRelations", fields: [originalPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Lists
  likeList              PostLike[]
  bookmarksReceivedList Bookmark[]
  comments          Post[]    @relation("OriginalPostRelations")


  postHashtags PostHashtag[] // Relation to PostHashtag
  postTags     PostTag[]     // Relation to PostTag
  


  // Relations for rebrews
  rebrewedByProfile     Profile?  @relation("RebrewsMadeByProfile", fields: [rebrewedById], references: [id])
  rebrewedById          String?   @db.ObjectId

  originalPostByProfile Profile?  @relation("RebrewsReceivedByProfile", fields: [originalPostById], references: [id])
  originalPostById      String?   @db.ObjectId

 
  // Relation
  reports     ReportPost[]
}


enum PostType {
  ORIGINAL
  COMMENT
  REBREW
}

enum MediaType {
  TEXT
  QUOTE
  IMAGE
  VIDEO
  POLL
  CHALLENGE
  LINK
  TEXT_TO_IMG
}


model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  targetProfileId    String @db.ObjectId
  targetObjectId    String?
  createdObjectId   String?
  initiatorId         String @db.ObjectId
  type      NotificationType 
  date_notified   DateTime?
  date_deleted    DateTime?
  createdAt DateTime @default(now())

  targetProfile   Profile   @relation("targetProfile", fields: [targetProfileId], references: [id], onDelete: Cascade)
  initiator  Profile  @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  
  dateCleared DateTime?


  updatedAt            DateTime  @updatedAt

}

enum NotificationType {
  LIKE
  COMMENT
  QUOTE
  REPORT
  FOLLOW
  DIRECT_MESSAGE
  POST_ON_PAGE
  TAG
  TRENDING
  BREAKING_NEWS
  SHARE
  BOOKMARK
  MILESTONE
  NOTICE
  INFRACTION
  UPVOTED
  DOWNVOTED
  APP_UPDATE
  TOS_CHANGES
  POST_REMOVED
  WON_CONTEST
  BIRTHDAY
  EARNINGS
  HOURLY_SUMMARY
  DAILY_SUMMARY
  WEEKLY_SUMMARY
  MONTHLY_SUMMARY
  ANNUAL_SUMMARY
  ALERT
  BOT_ALERT
  OTHER
}


model Hashtag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  tag       String @unique
  postHashtags PostHashtag[] // Relation to PostHashtag
}

model PostHashtag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId     String    @db.ObjectId  // Foreign key to the Post model
  hashtagId  String    @db.ObjectId  // Foreign key to the Hashtag model



  post       Post     @relation(fields: [postId], references: [id])
  hashtag    Hashtag  @relation(fields: [hashtagId], references: [id])


  @@unique([postId, hashtagId])
}

model PostTag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId String    @db.ObjectId // Foreign key to the Post model
  targetProfileId String    @db.ObjectId
  initiatorProfileId String   @db.ObjectId

  initiator   Profile  @relation("initiatorProfile", fields: [initiatorProfileId], references: [id])
  target      Profile  @relation("targetProfile", fields: [targetProfileId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  
  @@unique([postId, targetProfileId, initiatorProfileId])
}


enum LoginProvider {
  GOOGLE
  FACEBOOK
  EMAIL_AND_PASSWORD
  EMAIL_LINK
}